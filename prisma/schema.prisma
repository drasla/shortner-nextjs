// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/libraries/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// --- MODELS ---

model BrowserStat {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  browser String
  count   Int    @default(0)

  shortUrlId String
  shortUrl   ShortUrl @relation(fields: [shortUrlId], references: [id])

  @@unique([shortUrlId, browser])
}

model DailyStat {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  date  DateTime
  count Int      @default(0)

  shortUrlId String
  shortUrl   ShortUrl @relation(fields: [shortUrlId], references: [id])

  @@unique([shortUrlId, date])
}

model DeviceOsStat {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  device String
  os     String
  count  Int    @default(0)

  shortUrlId String
  shortUrl   ShortUrl @relation(fields: [shortUrlId], references: [id])

  @@unique([shortUrlId, device, os])
}

model HourlyStat {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  hour  Int
  count Int    @default(0)

  shortUrlId String
  shortUrl   ShortUrl @relation(fields: [shortUrlId], references: [id])

  @@unique([shortUrlId, hour])
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime

  token  String  @unique
  email  String
  userId String  @db.ObjectId
  used   Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_token")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt DateTime
  token     String   @unique
  userId    String   @db.ObjectId
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ShortUrl {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  shortCode   String @unique
  originalUrl String
  clicks      Int    @default(0)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  visits        VisitLog[]
  dailyStats    DailyStat[]
  browserStats  BrowserStat[]
  deviceOsStats DeviceOsStat[]
  hourlyStats   HourlyStat[]

  @@index([userId])
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  hashedId       String   @unique
  email          String?  @unique
  salt           String
  hashedPassword String?
  isAdmin        Boolean  @default(false)
  isAnonymous    Boolean  @default(true)
  isActive       Boolean  @default(true)

  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  shortUrls           ShortUrl[]

  @@map("users")
}

model VisitLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  shortUrlId String

  ipAddress String?
  userAgent String?
  referrer  String?

  shortUrl ShortUrl @relation(fields: [shortUrlId], references: [id])
}

